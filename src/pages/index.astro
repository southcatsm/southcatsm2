---
import OpenAnime from "@/components/OpenAnime.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
import LinkCard from "@/components/mdx/LinkCard.astro"
import TypeWriting from "@/components/TypeWriting.astro";
---

<BaseLayout title="主页">
	<link href="https://fonts.googleapis.com/css2?family=ZCOOL+KuaiLe&display=swap" rel="stylesheet" />
	<style>
		.halo-text{
			font-family: 'ZCOOL KuaiLe', cursive;
		}
	</style>
	<div class="overlay">
		<div class="halo-text">Southcatsm's Blogs</div>
	</div>
	<OpenAnime/>
    <div class="space-y-8">
		<section class="py-6">
			<div class="flex flex-col items-center text-center">
				<h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
					🌟 欢迎访问southcatsm的博客！
				</h1>
				<p class="text-xl text-base-content/80 max-w-3xl mb-8" id="display-text"></p>
			</div>		
		</section>
		<TypeWriting />

		<section class="py-6">
			<h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
				<Icon name="lucide:chart-network" class="w-6 h-6 text-primary" />
				<span>浩瀚网络世界，感恩与您相遇于此</span>
			</h2>
			<br/>
			<h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
				<Icon name="lucide:sparkles" class="w-6 h-6 text-primary" />
				<span>快捷导航</span>
			</h2>
			<div class="grid grid-cols-2 gap-4">
				<LinkCard
					title="博客"
					desc="点滴琐碎皆浪漫"
					url="/blog"
					img="/about.png"
					target="_self"
				/>
			 
				<LinkCard
					title="关于"
					desc="了解Southcatsm"
					url="/about"
					img="/acco.png"
					target="_self"
				/>
				
				<LinkCard
					title="作品"
					desc="千奇百怪的东西"
					url="/project"
					img="/code.png"
					target="_self"
				/>
			  
				<LinkCard
					title="联系"
					desc="欢迎五湖四海的朋友"
					url="/friend"
					img="/linkc.png"
					target="_self"
				/>
			</div>
		</section>
		<div class="divider my-8">
			<Icon name="lucide:house-plus" class="w-10 h-10 text-primary" />
		</div>
    </div>
	<script>
		//house-plus
		//<Icon name="mdi:checkbox-blank-outline" />
		//<Icon name="mdi:checkbox-marked" />
		const tasks = [
		  { 
		    category: 'work', 
		    title: '优化响应式布局', 
		    priority: 'high', 
		    date: '2024-03-21', 
		    done: false 
		  },
		  { 
		    category: 'life', 
		    title: '健身计划', 
		    priority: 'medium', 
		    date: '2024-03-22', 
		    done: true 
		  },
		  { 
		    category: 'work', 
		    title: '代码审查', 
		    priority: 'low', 
		    date: '2024-03-23', 
		    done: false 
		  },
		  { 
		    category: 'life', 
		    title: '购买日用品', 
		    priority: 'complete', 
		    date: '2024-03-24', 
		    done: true 
		  }
		];
		
		// 优先级颜色映射
		const priorityColors = {
		  high: 'red-500',
		  medium: 'yellow-500',
		  low: 'blue-500',
		  complete: 'green-500'
		};
		
		// 生成任务DOM元素
		function createTaskElement(task) {
		  const taskEl = document.createElement('div');
		  taskEl.className = 'task-item';
		  taskEl.dataset.category = task.category;
		  taskEl.dataset.status = task.done ? 'complete' : 'pending';
		
		  // 根据完成状态选择图标
		  const checkboxIcon = task.done ? 
		    'mdi:checkbox-marked' : 
		    'mdi:checkbox-blank-outline';
		  
		  // 根据完成状态决定颜色优先级
		  const statusColor = task.done ? 
		    'green-500' : 
		    priorityColors[task.priority];
		
		  taskEl.innerHTML = `
		    <div class="flex items-center gap-3">
		      <Icon name="${checkboxIcon}" class="text-${statusColor} text-xl" />
		      <div class="w-2 h-2 rounded-full bg-${statusColor}"></div>
		      <span class="flex-1 font-medium">${task.title}</span>
		      <span class="text-sm text-gray-500 dark:text-gray-400">${task.date}</span>
		    </div>
		  `;
		
		  return taskEl;
		}
		
		// 渲染任务列表
		function renderTasks(filter = 'all') {
		  const container = document.getElementById('task-container');
		  container.innerHTML = '';
		
		  const filteredTasks = tasks.filter(task => 
		    filter === 'all' || task.category === filter
		  );
		
		  filteredTasks.forEach(task => {
		    container.appendChild(createTaskElement(task));
		  });
		}
		
		// 过滤功能
		document.querySelectorAll('.filter-btn').forEach(btn => {
		  btn.addEventListener('click', function() {
		    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
		    this.classList.add('active');
		    renderTasks(this.dataset.filter);
		  });
		});
		
		// 初始加载
		document.querySelector('.filter-btn[data-filter="all"]').classList.add('active');
		renderTasks('all');
		
		// 图标渲染（需要在实际框架中自动处理，这里添加手动触发）
		setTimeout(() => {
		  document.querySelectorAll('Icon').forEach(icon => {
		    const iconName = icon.getAttribute('icon');
		    if (iconName) {
		      icon.innerHTML = `<span class="iconify" data-icon="${iconName}"></span>`;
		    }
		  });
		}, 100);
	</script>
</BaseLayout>
	